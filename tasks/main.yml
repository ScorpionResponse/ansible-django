---
- name: Set facts for python3
  set_fact:
    pip_executable: "pip3"
    venv_python: "python3"
  when: 
    - "use_python3|bool"
    - ansible_pkg_mgr == 'apt'

- name: Set facts for python2
  set_fact:
    pip_executable: "pip2"
    venv_python: "python2"
  when: "not use_python3|bool"

- name: Create Group for django
  group:
    name: "{{ django_group_name }}"
    system: yes
    state: present

- name: Create User for django
  user:
    name: "{{ django_user_name }}"
    groups: "{{ django_group_name }},www-data"
    append: yes

- name: Check if django_base_dir is present
  stat:
    path: "{{ django_base_dir }}"
  register: base_dir_present
  
- name: Create django base directory or change ownership
  file:
    path: "{{ django_base_dir }}"
    state: directory
    owner: "{{ django_user_name }}"
    group: "www-data"
    mode: 0775
  when: (base_dir_present.stat.exists == false or base_dir_present.stat.pw_name == 'root')

- name: Create django log directory
  file:
    path: "{{ django_log_dir }}"
    state: directory
    owner: "{{ django_user_name }}"
    group: "www-data"
    mode: 0775
  notify: ensure logs

- name: Check if django_virtualenv_path is present
  stat:
    path: "{{ django_virtualenv_path }}"
  register: venv_dir_present

- name: Create virtualenv directory
  become: yes
  become_user: "{{ django_user_name }}"
  command: "virtualenv -p /usr/bin/{{ venv_python }} {{ django_virtualenv_path }}"
  args:
    creates: "{{ django_virtualenv_path }}"
  when: venv_dir_present.stat.exists == false

- name: Checkout django project with git
  become: yes
  become_user: "{{ django_user_name }}"
  git:
    repo: "{{ django_git_repo }}"
    dest: "{{ django_base_dir }}/{{ django_project_name }}"
    update: yes
    accept_hostkey: yes
  notify: ensure ownership

- name: Create .env file
  become: yes
  become_user: "{{ django_user_name }}"
  template:
    src: django_env.j2
    dest: "{{ django_base_dir }}/{{ django_project_name }}/{{ django_subdirectory }}.env"
    mode: 0664
    
- name: Install postgres dependencies
  apt:
    pkg: libpq-dev
    state: present
  
- name: Install project requirements
  become: yes
  become_user: "{{ django_user_name }}"
  pip:
    requirements: "{{ django_base_dir }}/{{ django_project_name }}/{{ django_subdirectory }}requirements/{{ django_environment }}.txt"
    #virtualenv: "{{ django_virtualenv_path }}"
    executable: "{{ django_virtualenv_path }}/bin/{{ pip_executable }}"

- name: Ensure permissions on manage.py
  become: yes
  become_user: "{{ django_user_name }}"
  file:
    path: "{{ django_base_dir }}/{{ django_project_name }}/{{ django_subdirectory }}manage.py"
    mode: 0775

- name: Migrate Database
  become: yes
  become_user: "{{ django_user_name }}"
  django_manage:
    app_path: "{{ django_base_dir }}/{{ django_project_name }}/{{ django_subdirectory }}"
    command: migrate
    virtualenv: "{{ django_virtualenv_path }}"

- name: Collectstatic 
  become: yes
  become_user: "{{ django_user_name }}"
  django_manage:
    app_path: "{{ django_base_dir }}/{{ django_project_name }}/{{ django_subdirectory }}"
    command: collectstatic
    virtualenv: "{{ django_virtualenv_path }}"

- name: Create Django superuser
  become: yes
  become_user: "{{ django_user_name }}"
  script: "PATH={{ django_virtualenv_path }}/bin {{ role_path }}/files/superuser.py \"{{ django_settings_module }}\" \"{{ django_superuser_name }}\" \"{{ django_superuser_email }}\" \"{{ django_superuser_password }}\""
  args:
    chdir: "{{ django_base_dir }}/{{ django_project_name }}/{{ django_subdirectory }}"
  register: command_result
  failed_when: "'FAILED' in command_result.stdout"
  changed_when: "'CHANGED' in command_result.stdout"
  when: django_superuser_name is defined
